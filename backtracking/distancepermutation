#!/usr/bin/python
import sys
import copy

class Global:
    result = []

def permute(n):
    string = [0 for i in range(2*n)]
    
    #string[0:2] = [1,1]
    avail = {}
    for i in range(1,n+1):
        avail[i] = True
    typepermute(n,string, avail)

def isgoalstate(size, string):
    for i in range( 2*size):
        if string[i] == 0:
            return False
    return True

def getnextelement(size, avail):
    for i in range(1, size+1):
        if avail[i]:
            return i
    return 0

def getavailposition(size, string):
    for i in range(2*size):
        if string[i] == 0:
            return i
    return -1


def typepermute(size, string, avail):
    temp = getnextelement(size, avail)

    if isgoalstate(size, string):
        print string
        Global.result.append(copy.deepcopy(string))
        return

    if temp == 0:
        return
    localavail = copy.deepcopy(avail)
    for i in range(size):
        num = getnextelement(size, localavail)
        pos = getavailposition(size, string)
        if pos == -1 or num == 0:
            continue
        string[pos] = num
        if pos + num < 2*size and string[pos + num] == 0:
            string[pos] = num
            string[pos + num] = num
            avail[num] = False
            localavail[num] = False
            typepermute(size, string, avail)
            string[pos] = 0
            string[pos + num] = 0
            avail[num] = True                        
        else:
            string[pos] = 0
            localavail[num] = False
            continue

if __name__ == "__main__":
    n = sys.argv[1]
    permute(int(n))

    #for i in range(len(Global.result)):
     #   print Global.result[i]
    print "Number of Solutions: {0}".format(len(Global.result))

